// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutterwidgetexample/entity/weather_result_entity.dart';
import 'package:flutterwidgetexample/generated/json/weather_result_entity_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case WeatherResultEntity:
			return WeatherResultEntityFromJson(data as WeatherResultEntity, json) as T;			case WeatherResultEntityResult:
			return weatherResultEntityResultFromJson(data as WeatherResultEntityResult, json) as T;			case WeatherResultEntityResultField:
			return weatherResultEntityResultFieldFromJson(data as WeatherResultEntityResultField, json) as T;			case WeatherResultEntityRecords:
			return weatherResultEntityRecordsFromJson(data as WeatherResultEntityRecords, json) as T;			case WeatherResultEntityRecordsLocation:
			return weatherResultEntityRecordsLocationFromJson(data as WeatherResultEntityRecordsLocation, json) as T;			case WeatherResultEntityRecordsLocationWeatherElemant:
			return weatherResultEntityRecordsLocationWeatherElemantFromJson(data as WeatherResultEntityRecordsLocationWeatherElemant, json) as T;			case WeatherResultEntityRecordsLocationWeatherElemantTime:
			return weatherResultEntityRecordsLocationWeatherElemantTimeFromJson(data as WeatherResultEntityRecordsLocationWeatherElemantTime, json) as T;			case WeatherResultEntityRecordsLocationWeatherElementTimeParameter:
			return weatherResultEntityRecordsLocationWeatherElementTimeParameterFromJson(data as WeatherResultEntityRecordsLocationWeatherElementTimeParameter, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case WeatherResultEntity:
			return WeatherResultEntityToJson(data as WeatherResultEntity);			case WeatherResultEntityResult:
			return weatherResultEntityResultToJson(data as WeatherResultEntityResult);			case WeatherResultEntityResultField:
			return weatherResultEntityResultFieldToJson(data as WeatherResultEntityResultField);			case WeatherResultEntityRecords:
			return weatherResultEntityRecordsToJson(data as WeatherResultEntityRecords);			case WeatherResultEntityRecordsLocation:
			return weatherResultEntityRecordsLocationToJson(data as WeatherResultEntityRecordsLocation);			case WeatherResultEntityRecordsLocationWeatherElemant:
			return weatherResultEntityRecordsLocationWeatherElemantToJson(data as WeatherResultEntityRecordsLocationWeatherElemant);			case WeatherResultEntityRecordsLocationWeatherElemantTime:
			return weatherResultEntityRecordsLocationWeatherElemantTimeToJson(data as WeatherResultEntityRecordsLocationWeatherElemantTime);			case WeatherResultEntityRecordsLocationWeatherElementTimeParameter:
			return weatherResultEntityRecordsLocationWeatherElementTimeParameterToJson(data as WeatherResultEntityRecordsLocationWeatherElementTimeParameter);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'WeatherResultEntity':
			return WeatherResultEntity().fromJson(json);			case 'WeatherResultEntityResult':
			return WeatherResultEntityResult().fromJson(json);			case 'WeatherResultEntityResultField':
			return WeatherResultEntityResultField().fromJson(json);			case 'WeatherResultEntityRecords':
			return WeatherResultEntityRecords().fromJson(json);			case 'WeatherResultEntityRecordsLocation':
			return WeatherResultEntityRecordsLocation().fromJson(json);			case 'WeatherResultEntityRecordsLocationWeatherElemant':
			return WeatherResultEntityRecordsLocationWeatherElemant().fromJson(json);			case 'WeatherResultEntityRecordsLocationWeatherElemantTime':
			return WeatherResultEntityRecordsLocationWeatherElemantTime().fromJson(json);			case 'WeatherResultEntityRecordsLocationWeatherElementTimeParameter':
			return WeatherResultEntityRecordsLocationWeatherElementTimeParameter().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'WeatherResultEntity':
			return List<WeatherResultEntity>();			case 'WeatherResultEntityResult':
			return List<WeatherResultEntityResult>();			case 'WeatherResultEntityResultField':
			return List<WeatherResultEntityResultField>();			case 'WeatherResultEntityRecords':
			return List<WeatherResultEntityRecords>();			case 'WeatherResultEntityRecordsLocation':
			return List<WeatherResultEntityRecordsLocation>();			case 'WeatherResultEntityRecordsLocationWeatherElemant':
			return List<WeatherResultEntityRecordsLocationWeatherElemant>();			case 'WeatherResultEntityRecordsLocationWeatherElemantTime':
			return List<WeatherResultEntityRecordsLocationWeatherElemantTime>();			case 'WeatherResultEntityRecordsLocationWeatherElementTimeParameter':
			return List<WeatherResultEntityRecordsLocationWeatherElementTimeParameter>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}